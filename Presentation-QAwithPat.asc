# Overview

This talk was conceived of a a conversation
with my friend and college Pat McGee. I wrote
it imagining that I was answering Pat's
questions about how to start with Git on
Windows. The result is an _opinionated_ guide
for getting started with Git on Windows.

# How do we install Git on Windows?

_____
So, Shaun. Let's get started. How do we install Git
on Windows?
_____

Chocolatey is the new-ish Windows package manager.
PowerShell is my prefered Git interface, and ConEmu
is my prefered way to use PowerShell.

The following is how to use Chocolatey
to install Git for use with PowerShell and ConEmu.

.Install chocolaty
[PowerShell]
----
> Invoke-Expression (curl 'https://chocolatey.org/install.ps1')
----

.Install MsysGit
[PowerShell,Chocolatey]
----
> choco install git
----

.Msysgit includes:
[NOTE]
====
. **Git SCM** (this is Git for Windows)
. **Git Bash** (emulation of Git in Linux)
. **Git GUI** (a basic GUI)
. **Shell Integration** (right click integration)
====

.Install PoshGit
[PowerShell,Chocolatey]
----
> choco install poshgit
----

.Install ConEmu
[PowerShell,Chocolatey]
-----
> choco install conemu
-----

Now we're ready to use Git with PowerShell and ConEmu.

# How do we create a local repo?

_____
Okay, so now we've installed Git the way that you like it.
How do create a repo?
_____

.Everything is local
[NOTE]
=====
Git is a distributed version control system.
A local repo has everything that a remote one has.
=====

Open PowerShell in ConEmu.
Then initiate a local git repository.

.Initiate a local Git repository
[PowerShell,Git]
----
# navigate to Documents
> cd ~\Documents

# Create and enter a GitDemo directory
> ni -t d GitDemo
> cd GitDemo

# Create and enter a repo1 directory
> ni -t d repo1
> cd repo1

# Turn it into a Git repo
> git init

# The repo1 directory now has a child .git directory
> dir -force -n
.git

----

# What's the most basic Git workflow?
_____
Great. We have a local repository. How do we use it?
_____

Since everything in Git is local, we can start
working with the repository locally, without the need
for a remote. This can be helpful for working on
personal projects that you might otherwise version
with ZIP files and timestampes.

Here's how to do basic, local version control with Git.

. *Make changes* to files in the working directory
. *Stage* those changes with `git add`
. *Commit* those changes with `git commit`
. Repeat
. *Check status* throughout with `git status`

.git add
[NOTE]
====
* In Git, we *add* a file to the *index*.
The index is also called the *staging area*.
The staging area is a list of all the files
that are going to be part of the next commit.

.Here it is in scematic form:
....
Working Directory > Staging Area > Repository
[make changes]    > [git add]    > [git commit]
....
====

.The most basic Git workflow
[PowerShell,Git]
-----
# create a file and check status
ni -t f file1.txt
git status

# stage the file and check status
git add file1.txt
git status

# commit the file
git commit -m "Add file1.txt"

# add some content to the file; save; check status
ac file1.txt "Some content"
git status

# stage the file; commit
git add file1.txt
git commit -m "Add content to file1.txt"
-----

When running `git status`, you'll see messages about
how your files are doing. From Git's perspective, your
files/working directory can be in one of four states:
untracked, staged, clean, modified.

.git status messages
[NOTE]
=====
Untracked files::
* Git knows these exist but isn't tracking them.
* So, you can stage, delete, or ignore them.
Changes to be committed (aka staged)::
* There are files in the index/staging area.
* So, you can commit them now.
Nothing to commit (aka clean)::
* You have no pending changes to any files.
* So, you can make changes or pull.
Modified::
* You have changed and saved a tracked file.
* So, you can stage the file.
=====

# How do we push an existing local repo to a remote repo?

In Git, a remote repository can in lots of places.
Commonly, people use GitHub and BitBucket over HTTP or SSL.
Also, you can setup a remote on your local machine or
network and use the the file:// protocol to communicate.
Let's start with the most common, which is probably
GitHub over HTTP.

## Create a GitHub account.
. Go to https://github.com/
. Sign up :-)

## Create a GitHub repo.
. Sign in to GitHub.
. On the main page, choose New Repository
.. Add a README
.. Add a VisualStudio .gitignore
.. Add an MIT Liscence

## Add this GitHub repo as a remote for your local one.
. Copy the SSH clone URL
. Add the remote to the repo

.Add a remote to an existing local repo
----
cd repo1
git remote add github git@github.com:bigfont/Temp-Repo1.git`

# view the remote
git fetch github
git remote -v
git remote show github

# diff again the remote
git diff github/master --name-status

# set upstream and check status
git branch --set-upstream-to github/master

# bring in the remote changes (e.g. README, gitignore)
git pull
----

Cool. We can now fetch/pull and push to the github
repo that we created.

.Upstream, tracking, status, fetch/pull, and push.
[NOTE]
=====
Whenever you don't specify a remote branch,
upstream is the remote branch from which `fetch/pull`,
by default the remote to which you push to,
and that `git status` checks for being ahead/behind.
You can inspect this as follows:
-----
git branch --set-upstream-to github/master
gc .git\config
git branch -unset-upstream
gc .git\config
-----
=====


# Clone an existing repository

_____
Okay, so that's what we do if we want to share
an existing local repository. What if we want to
contribute to an existing remote repository?
_____

Instead of creating a local repository first,
sometimes we want to contribute to an existing
project that already has a shared repo. For this
we use `git clone`.

We can do this with the remote repository that we
creative above.

.Clone an existing shared repository.
-----
cd GitDemo

# clone from GitHub with SSH
git clone git@github.com:bigfont/Temp-Repo1.git ssh-repo1

# clone from GitHib with HTTP
git clone https://github.com/bigfont/Temp-Repo1.git http-repo1

# clone locally with file://
git clone C:\Users\BigFont\Documents\GitDemo\repo1 file-repo1
-----

By default, `git clone` will copy the remote repository
into a directory with the same name. We can override this
with `git clone <url> <directory>` Also, `clone` runs
the following branch and tracking defaults:

* *Git names the remote origin*. You can
inspect this with `git remote -v`. This is just a
convention.
* *Git sets upstream as origin*. Inspect
this with `gc .git\config`. The local
`master` branch has `origin` as its remote.

As a result of these defaults, we can run the git remote
commands without having first to run
`git branch --set-upstream-to`.
