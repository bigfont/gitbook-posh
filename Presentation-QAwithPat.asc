# How do we install Git on Windows?

The following is how to use Chocolatey to install Git for use with PowerShell.

.Install chocolaty
[PowerShell]
----
Invoke-Expression (curl 'https://chocolatey.org/install.ps1')
----

.Install MsysGit
[PowerShell,Chocolatey]
----
choco install git
----

Msysgit includes:

. **Git SCM** (this is Git for Windows)
. **Git Bash** (emulation of Git in Linux)
. **Git GUI** (a basic GUI)
. **Shell Integration** (right click integration)

.Install PoshGit
[PowerShell,Chocolatey]
----
choco install poshgit
----

Now we're ready to use Git.

# How do we create a local repo?

.Everything is local
[NOTE]
=====
Git is a distributed version control system.
A local repo has everything that a remote one has.
=====

.Initiate a local Git repository
[PowerShell,Git]
----
cd ~\Documents
ni -t d GitDemo
cd GitDemo
ni -t d Repo1
git init
----

The \GitDemo\Repo1 directory is now a Git repo.

# What's the most basic Git workflow?

. Make changes to files in the working directory
. Stage those changes with `git add`
. Commit those changes with `git commit`
. Repeat
. Check Git status throughout with `git status`

.git add
[NOTE]
====
* In Git, we *add* a file to the *index*.
The index is also called the *staging area*.
The staging area is a list of all the files
that are going to be part of the next commit.
* Working Dir > Index > Repo
====

.The most basic Git workflow
[PowerShell,Git]
-----
# create a file and check status
ni -t f file1.txt
git status

# stage the file and check status
git add file1.txt
git status

# commit the file
git commit -m "Add file1.txt"

# add some content to the file; check status
ac file1.txt "Some content"
git status

# stage the file; commit
git add file1.txt
git commit -m "Add content to file1.txt"
-----

.git status messages
[NOTE]
=====
Untracked files::
* Git knows these exist but isn't tracking them.
* You can stage, delete, or ignore them.
Changes to be committed::
* There are files in the index/staging area.
* You can commit them now.
Nothing to commit::
* You have no pending changes to any files.
Modified::
* You have changed a tracked file.
* You can stage the file.
=====

# How do we enlist in an existing repository?

Okay, we have a local repository.
We have made several commits.
Now we want to share our work with others.

This will involve using *clone, fetch, and pull*
to work with a *remote*.

Git calls other repositories remotes;
although, these can be anywhere. Let's
setup another local repository using repo1
and the remote.

.Clone a remote
[PowerShell,Git]
-----
# clone repo1 into a repo2 directory
cd..
git clone C:\Users\BigFont\Documents\GitDemo\repo1 repo2

# repo2 now contains repo1's files
cd repo2
dir -n

# inspect the remotes
git remote -v
git remote show origin
-----

repo2 now has the same contents (within limits)
as does repo1. Also, repo2 has a master branch
that tracks the repo1/master branch. Within repo2,
we use *fetch* and *pull* to stay up to date
with repo1.

.Git fetch and git pull
[PowerShell,Git]
----
# create, stage and commit a new file to repo1
cd repo1
ni -t f file2.txt
git add file2.txt
git commit -m "Add file2.txt"
git log --oneline

# switch to repo2 and pull
cd ..\repo2
git pull
git log --oneline
----

After commiting changes to repo1, we are able
to pull them down into repo2.

# How do we contribute to an existign repo?

So far everything has been local. Let's keep
it that way for a little bit longer.

.bare repositories and git push
[NOTE]
====
We can only `git push` to a bare respository.
A bare repository contains only the contents
of the .git folder and has no working directory.
====
