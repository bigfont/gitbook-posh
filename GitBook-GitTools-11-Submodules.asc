
[NOTE]
=====
- Schedule Estimate, 5 hours
- Schedule Actual, 3 hours
=====

[NOTE]
.Gotchas
=====
* Submodule directories are case sensitive.
=====

# Submodules

*****
Develop concurrently on several projects
while keeping each separate.
*****

- Use one or more projects from within another project,
- while keeping the commits seperate. E.g.
** use and contrib to a third partly library
** develop a project that's shared among parents
- Treat parent and child as separate repos,
- while also using them together.

[NOTE]
=====
Submodules help us to avoid code entanglement.
=====

# Starting with Submodules (1 hr)

- main project and sub projects

-----
git submodule add <uri> [dir-name]
git diff submoduleDir
git diff --submodule
-----
- add a submodule to an existing repo
- the submodule dir will have the repo name
- submodule mapping goes into `.gitmodules`
** stores <url> directory mappings
** is version controlled like other files
** has a line for each submodule
** for a public project, use a public url
- git only tracks a submodule when we're in its dir
- from the parent, git tracks it as a dir
** not as a subdir
** nor as a file

# Cloning a Project with Submodules (0.5 hrs)

-----
# clone parent, register submodules, pull submodule
git clone <parent-repo-url>
git submodule init # register submodules
git submodule update # pull down submodule files

# do it all at once
git clone --recursive <parent-repo-url>
-----

- When we clone a repo with submodules,
- we receive empty submodule dirs.
- Populate with `submodule init; submodule update`.

# Working on a Project with Submodules

Examples

* Use Bootstrap within a csproj
* Use an Orchard module within an Orchard proj

## Pulling in Upstream Changes

This is the workflow when we want to use
a submodule without contributing to it.

.Update a submodule, then view update list
-----
cd <submodule-dir>
git fetch
git merge origin/master
-----

.Update all [or the specified] submodules
-----
git submodule update remote [submodule-dir]
-----

.View submodule updates
-----
cd <parent-directory>
git diff --submodule
-----

.Commit the parent
-----
git add <submodule-dir>
git commit -m "Update submodule"
-----

## Working on a Submodule

This is the workflow when we also want to
contribute to the submodule.

.question
****
- Q: How does `git submodules update` differ from `git submodules update --remote`?
- A: On its own, it does a checkout of the local
master. With `--update`, it does a checkout of
the remote master without moving the local master
forward (assuming that we're tracking master.) In
neither cases does it merge nor rebase.
****

.Fetch and merge/rebase the remote master
-----
git submodule update --remote --merge
git submodule update --remote --rebase
-----

## Publishing Submodule Changes

.Push submodule changes
-----
git push --recurse-submodules=[<check|on-demand]
-----

The `check` option is more conservative; the
`on-demand` option is more automated. The
former checks whether the submodules' own
remote has the updates; the latter pushes the
submodules' changes to their respective
remotes.

## Merging Submodule Changes

* If submodule histories have diverged, and
* are commited to diverging superproject branches,
* then the merge may be complex.

# Submodule Tips

## Submodule Foreach

.Do something on all submodules
-----
git submodule foreach <'some command'>
git submodule foreach 'git stash'
-----

Note that the command goes in single quotes.

## Useful Aliases

The book outlines some aliases that are
helpful once we understand submodules.

.Add an alias to git
-----
git config alias.someAlias 'git some command'
-----

# Gotchas with Submodules

While each of these are possible and require
some care to do correctly.

1. Switching superproject branches.
2. Turning an existing subdir into a submodule.
