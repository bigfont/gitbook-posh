cd ~\Documents\GitHub\gitbook-posh

# maintenance
# -------------------
cls

# normally auto gc does nothing
# other times, it runs gc
git gc --auto
dir .git/refs -Recurse -File

# after running gc, .git/refs will be empty
# git will have put the refs into .git/packed-refs
git gc
dir .git/refs -Recurse -File
cat .git/packed-refs 

# data recovery
# --------------------
cls
git log --pretty=oneline

# make a few arbitrary changes and commits
ni practice.txt -ItemType file
git add practice.txt
git commit -m "One"

ac practice.txt "Here"
git add practice.txt
git commit -m "Two"

ac practice.txt "is"
git add practice.txt
git commit -m "Three"

ac practice.txt "Shaun"
git add practice.txt
git commit -m "Four"

git log --oneline -5

# then roll the branch back via a hard reset to your first commit
git reset --hard e6153a8

# our most recent commits are now dangling
# no branch reaches them
git log --oneline -5

# lets reconnect with our lost commits, there are two ways to find them:
git reflog
git log -g -5

# now lets recover by creating a branch that points to our most recent dangling commit
# this will probably be HEAD@{1}, we use its SHA
git branch recover-branch 1955deb
git log --oneline recover-branch -5
# cool, we recovered!

# here's a harder scenario: 
# we delete the recover-branch and we delete reflogs
git branch -D recover-branch
rm -r -force .git/logs

# to recover our dangling, lost commits, 
# we use a database integrity check to find dangling commit SHAs
# so we can recover what is dangling
git fsck --full
git branch recover-branch 894b1f
git log --oneline recover-branch -5

# removing objects
# -------------------------

# note: the removing object process is destructive to commit history
# it rewrites every commit object since the earliest tree you have to modify,
# other contributors might have to rebase onto the new commit

# add a massive tarball
curl http://kernel.org/pub/software/scm/git/git-1.8.2.3.tar.gz -OutFile git.tgz
git add git.tgz
git commit -m "Added git tarball again.";

# remove the tarbal from the working tree
git rm git.tgz
git commit -m "oops - removed large tarball."

# do garbage collection to see how much space we're using
# the git rm didn't remove the large file from our history
# size-pack is still large
git gc
git count-objects -v

# find the large file
# starting by inspecting the pack files
dir -Recurse .git/objects/pack

# next, sort the index (idx) to find the large blob
# note, this is more verbose in PowerShell than it is in bash, 
# because PS uses objects whereas bash processes text directly

# store the contents of the index in the $vp variable
$idxPath = ".\.git\objects\pack\pack-f7911c60917f84551839d7f81422b676e39fc5b4.idx"
$vp = git verify-pack -v $idxPath

# remove summary values from the index content (summary lines have a colon)
$vp = $vp | where { $_ -notlike "*:*" }

# turn the index's list into tab separated values (x2) for consistency and readability
# it's currently space separated, sometimes with one and othertimes three spaces between columns
$vp = $vp -replace "\s{1,}", "`t`t"

# sort the index by file size (split on tab x2 and sort on the third column)
# and select the largest three
$vp = $vp | sort { [int]($_ -split "`t`t")[2] }
$vp | select -Last 3

# now that we know the massive blob's SHA, we can learn its file name
git rev-list --objects --all | where { $_ -like '2cc0dd2*' }

# now that we know the name of the large file, 
# we can see what commits modified it
git log --oneline --branches -- practice/git.tgz

# now that we know the large file's name and the earliest commit that touched it, 
# we can remove it by rewriting all the commits downstream from when we first created it
# TODO how do we replace --all with a specific early commit??
git filter-branch --index-filter 'git rm --cached --ignore-unmatch practice/git.tgz' -- --all

# remove other stuff that still contains the large file
# refs\original is like a backup
rm -Recurse -Force .\.git\refs\original
rm -Recurse -Force .\.git\logs

# then repack the database and count objects
# the pack-size should be small again; though, the size will still be large
git gc
git count-objects -v

# use expire now to remove the big object from our loose objects
# size should now be small again too; we've completely removed the massive blob
git prune --expire now
git count-objects -v

# to remove the large file from the remote also, 
# once we're happy with our local repo, run the following:
git push --force