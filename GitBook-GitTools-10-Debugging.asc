
# File Annotation

-----
git blame -L 12,22
-----
- annotate line numbers, limit the range.
- in the output the `^` prefix shows code that hasn't change
- *this does not work as expected*;
** that is, the <n,m> throws a 'bad revision' error

-----
git blame -C
-----
- determine from where copy/paste code originated
- *this does not work as expected*;
** that is, the output does not list the file names

# Binary Search

With enough thought, we can fully automate this process!

[NOTE]
=====
Binary Search

- aka half interval search
- finds the position of a specified key
- uses a divide and conquer style search pattern
- search half, search half that half, etc
=====

-----
git bisect start
git bisect bad
git bisect good <ref>
...
git bisect good|bad
...
git bisect reset
-----

1. start the process
1. tell git the current commit is broken
1. tell git the last known working state
1. git will then check out the middle commit between bad and good
1. test the code to determine whether it's broken
** if there is no bug, run `git bisect good`
** git will checkout the middle between this and the bad
** else run `git bisect bad`
** git will checkout the middle between this and the good
1. repeat until we find the bug
1. then run `git bisect reset`
