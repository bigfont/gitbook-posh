
- in git, it's best to merge often to avoid conflicts
- git does not try to auto-merge funky conflicts

# merge conflicts

**To work with the example first turn off autocrlf locally**

git config --local core.autocrlf false

1. create ruby file with content
2. commit in master
3. switch to whitespace
4. convert from dos 2 unix (*)
5. commit
6. change world to mondo
7. commit
8. switch to master
9. document the ruby
0. commit on master
1. try to merge in whitespace to master
2. PROBLEM :-)

## aborting a merge

- `git status -sb` // short, branch
-- inspect, then either

- `git merge --abort` // this is WD safe
-- or

- `git reset --hard HEAD` // this is not WD safe

## ignoring whitespace

- `git merge -Xignore-all-space` // ignore all WS
- `git merge -Xignore-space-change` // [\s] == [\s+]

## manual file re-merging

### conflict stages

- stage1, common ancestor
- stage2, ours
- stage3, theirs

### inspect the indexes

- `git show :1:fileName.ext`
- `git show :2:fileName.ext`
- `git show :3:fileName.ext`

### get the SHAs

- `git ls-files -u` // -u is unmerged

### file merge

- `git merge-file [current] [base] [other] -p`
- the `-p` sends the result to stout

### doing a manual merge

(I didn't get this to work b/c of git interprets the files as binary)

- `git show :1:simple.rb > simple.common.rb`
- `git show :2:simple.rb > simple.ours.rb`
- `git show :3:simple.rb > siple.theirs.rb`
- `unix2dos simple.theirs.rb`
- `git merge-file -p simple.ours.rb simple.common.rb simple.theirs.rb`

[NOTE]
==========================
The example changes here!

----------
> git log -15 --oneline --decorate --graph --all
* 9d18a28 (HEAD, advmerg-eg2.1) Update readmoi
* 69754de Add readmoi
* 66fb803 Change test to hola world
| * a22c1c8 (advmerg-eg2.2) Add more testing
| * f1e61c6 add testing script
| * cb58e38 change text to hello mondo
|/
* 5a63715 initial hello world code
----------

==========================

## checking out conflicts

(This appears to work only in git 2.0)

- `git checkout --conflict=diff3|merge <fileName>`

## merge log

----
git log --oneline --left-right HEAD...MERGE_HEAD
----
- `--left-right`
*** useful in a symmetric diff
*** show from which side a commit is reachable
- `...`
** do a symmetric diff, i.e. an XOR diff
** i.e. show commits that are reachable by A or B but not both
** see https://www.kernel.org/pub/software/scm/git/docs/git-rev-parse.html#_specifying_ranges
- `MERGE_HEAD`
** records the commits that we are merging

----
git log --oneline --left-right --merge // view conflicts only
git log --oneline --left-right --merge --name-only // view files
git log --oneline --left-right --merge -p // view patches
----
- show only conflicted commits

## combined diff format

- after a merge `git diff` will show unresolved stuff
- col1, what's in the working dir that is different than --ours
- col2, what's in the working dir that is different than --theirs
- view this in the log with `git log --cc -p -- filename.ext`

# undoing merges

## fix the references

[NOTE]
==========
This rewrites history. Only do it if you haven't pushed.
==========

----------
git reset --hard HEAD~
----------
- checkout the branch that you accidentally merged into
- then run a hard git reset

## reverse the commit

[NOTE]
=====
This leads to its own weirdness.
1. a subsequent merge of the same, unchanged branch will not work
2. a subsequent merge of the same, changed branch will partly work
**To workaround the wierdness, revert the revert!**
=====

----------
git revert -m 1 HEAD
----------
- undo the commit that HEAD current points to
- this creates a new ^commit that undoes the target commit

# other types of merges

- the normal merging strategy is 'recursive'
- there are others...

## ours or theirs preference

### ours/theirs option
- we've already seen whitespace-related 'recursive' options.
- their are also 'ours' and 'theirs' options
- git will choose 'ours' instead of adding conflict markers

-----
-Xignore-all-space
-Xignore-space-change
-Xours
-Xtheirs
-----

### ours/theirs strategy
- this is more draconian than the above option
- the above is an option of the recursive strategy
- this is an all new strategy
- in which it isn't a merge at all!
- git just uses our file and pretends to do a merge
- this fake merge can be useful for esoteric backporting

## subtree merging

- two projects, one maps to a subdir of another, and vice versa
- 
