
# Git vs Other Version Control Systems

## Considerations

* Distributed vs Centralized (*)
* Faster vs Slower
* Scalable vs Not, Re History Length
* Win32 Support, 2nd vs 1st Class Citizen
* Steep vs Flat Learning Curve
* Hashes vs ???
* Tracking File Contents vs ???
* Not Tracking Dirs vs Tracking Dirs
* Easy vs Hard to Modify History
* Lots or little IDE integration

## Distributed vs Centralized

Centralized::
* Subversion, Team Foundation Server, Perforce
* One True Repository
* Everyone does checkout and commit to one repo
* Works only when connected
* History is a line

Distributed::
* Mercurial, Git
* All Repositories are Equal
* Everyone does checkout and commit to his/her own repo
* Works also when disconnected
* History is a directed acyclic graph

## Line vs DAG

Centralized version control systems tend to represent history as a line. Distributed ones must use a directed acyclic graph.

Graph::
* a set of objects
* some pairs of objects are linked
* objects are called *vertices*
* links are called *edges*

Directed Graph::
* the edges have a direction
* directed edges are called *arcs* or *arrows*

Directed Acyclic Graph (DAG)::
* acyclic means no return trips
* if we start at vertex (v),
* and follow a sequence of edges,
* there is no way to return to (v).

Line::
* you can only commit a new version,
* if it is based on the latest version.
* ergo, merge then commit, commiting is hard.
* CVCS use a line because they can (connected commits)

DAG::
* you can checkin a new version,
* if it was based any existing version.
* ergo, commit then merge, commiting is easy
* DVCS use a DAG because they must (disconnected commits)

## Git

Philosophy::
* aggregate of tools not one monolithic binary
* installs 100+ binaries
* ergo, flexible, pluggable & extensible

History & Rebasing::
* is not sacred
* rebase!

Branching, Tagging, Merging::
* merging often just works
* named branches are easy to delete

Fast::
* built with C

SVN Migration::
* easy to convert from SVN to Git
* learning the equivalent commands is hard
* e.g. `git revert` is nothing like `svn revert`

Harder to Learn::
* it's important to learn the internals
* the documentation is weak

Integration with other Projects::
* tough
* i.e. have to parse command line output

GitHub::
* it is built for Git

Culture::
* more popular than Mercurial
* much more evangelical

Best for::
* command line wizards
* large teams
* complicated projects
* a configurable VCS

## Mercurial

* Distributed

Philosophy::
* monolithic binrary not aggregate of tools
* installs 1 binary
* ergo, inflexible

History::
* is sacred, is immutable out of the box
* it's harder to rewrite commits

Branching, Tagging, Merging::
* slightly slower than git's
* named branches are hard to delete

SVN Migration::
* easy to convert to mercurial
* very similar commands to SVN

Easier to Learn::
* better documentation

Integration with other Projects::
* easier
* Python code base
* import classes, call into the code base

BitBucket::
* it is built for Mercurial

Culture::
* less popular than Git
* much less evangelical

Best for::
* smaller teams
* those who prefer usability and smoothness of operation

# Day to Day Usuage

## Verbs

## Locations

## Workflows

## Etiquette

## Fixing Mistakes

## Performing Maintenance
